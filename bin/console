#!/usr/bin/env php
<?php

if (!is_dir(dirname(__DIR__).'/vendor')) {
    echo "###############################################################\n";
    echo "#  vendor directory not found. installing composer dependencies\n";
    echo "###############################################################\n";

    system("composer install");
}

// application.php
require dirname(__DIR__).'/config/defines.php';
require dirname(__DIR__).'/vendor/autoload.php';

error_reporting(E_ALL & ~E_NOTICE);

use Psr\Container\ContainerInterface;
use \Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputOption;
use \HaydenPierce\ClassFinder\ClassFinder;
use \Symfony\Component\Console\Command\Command;
use \App\App;

$application = new Application();

// load environment variables
$dotenv = Dotenv\Dotenv::create(App::getDir(App::ROOT));
$dotenv->load();

$builder = new \DI\ContainerBuilder();
$builder->addDefinitions(App::getDir(App::CONFIG).DS.'di.php');

try {
    /** @var ContainerInterface $container */
    $container = $builder->build();

    $applicationDefinition = $application->getDefinition();
    $applicationDefinition->addOptions([
        new InputOption('website', 'w', InputOption::VALUE_OPTIONAL, 'Website ID'),
    ]);

    global $app;
    $app = new \App\App();
    $container->set(\App\App::class, $app);
    $container->set('app', $container->get(App::class));
    $website = null;

    // reading with like this as trying to bind applicationDefinition to a new ArgvInput
    // leads to no options during "run"
    foreach (array_slice($argv, 1) as $console_token) {
        if (preg_match("/--website=([0-9]+)|-w\s?([0-9]+)/msi", $console_token, $matches)) {
            $website_id = $matches[1];
            try {
                $website = $container->get('db')->table('website', $website_id);
            } catch (Exception $e) {}
        }
    }

    if ($website == null && is_file(App::getDir(APP::ROOT) . DS . '.install_done')) {
        try {
            $website = $container->get('db')->table('website')->limit(1)->fetch();

            // put website into environment variables
            putenv('website_id='.$website->id);
        } catch (Exception $e) {
            // put website into environment variables
            putenv('website_id=1');
        }
    }

// ... register commands
    $commandsClasses = ClassFinder::getClassesInNamespace('App\Site\Commands', ClassFinder::RECURSIVE_MODE);
    foreach($commandsClasses as $commandClass){
            $array = explode("\\", $commandClass);
            $classname = array_pop($array);
            $commandname = str_replace("App\\Site\\Commands\\", "", $commandClass);
            $commandname = preg_replace("/".$classname."$/", "", $commandname) . $container->get('utils')->pascalCaseToSnakeCase($classname);
            $commandname = strtolower(str_replace("\\", ":", $commandname));
            $commandObj = $container->make($commandClass, ['name' => $commandname, 'container' => $container]);
            if ($commandObj instanceof Command) {
                $application->add($commandObj);
            }
    }

    $application->run();
} catch (\Exception $e) {
    if ($container instanceof ContainerInterface) {
        $container->get('utils')->logException($e);
    }
    echo "Exception: {$e->getMessage()}\n";
}
