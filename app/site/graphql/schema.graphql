schema {
  query: Query
#  mutation: Mutation
}

type Query {
  greetings(firstName: String!, lastName: String!): String!
  pages(input: SearchCriteriaInput): [Page]
  news(input: SearchCriteriaInput): [News]
  events(input: SearchCriteriaInput): [Event]
  medias(input: SearchCriteriaInput): [MediaElement]
  websites(input: SearchCriteriaInput): [Website]
  links(input: SearchCriteriaInput): [LinkExchange]
  rewrites(input: SearchCriteriaInput): [Rewrite]
  pageRegions(rewrite_id: Int!): PageRegions
  Configuration: [ConfigsResult]
  menuTree(menu_name: String!, website_id: Int!): [Menu]
  taxonomy(input: SearchCriteriaInput): [Taxonomy]
}

#type Mutation {
#}

input SearchCriteriaInput {
  criteria: [SearchCriterionInput]
  limit: Int
  offset: Int
  orderBy: [OrderByInput]
}

input SearchCriterionInput {
  key: String!
  value: String!
}

input OrderByInput {
  field: String!
  direction: OrderDirection!
}

enum OrderDirection {
  ASC
  DESC
}

input HelloInput {
  firstName: String!
  lastName: String
}

type User {
  nickname: String!
}

type Website {
  id: Int!
  site_name: String!
  domain: String!
  aliases: String
  default_locale: String
}

type Taxonomy {
  id: Int!
  title: String!
  position: Int
  locale: String
  content: String
  url: String!
  path: String
  level: Int
  owner: User
  website: Website
  meta_keywords: String
  meta_description: String
  meta_title: String
}

type MediaElement {
  id: Int!
  path: String!
  filename: String!
  mimetype: String!
  filesize: Int!
  lazyload: Boolean
  website: Website
  getImageUrl: String!
  getThumbUrl_300x200: String!
}

type Page {
  id: Int!
  title: String!
  locale: String
  content: String
  url: String!
  owner: User
  website: Website
  terms: [Taxonomy]
  gallery: [MediaElement]
  meta_keywords: String
  meta_description: String
  meta_title: String
}

type News {
  id: Int!
  title: String!
  locale: String
  content: String
  url: String!
  date: String!
  owner: User
  website: Website
  meta_keywords: String
  meta_description: String
  meta_title: String
}

type Event {
  id: Int!
  title: String!
  locale: String
  content: String
  url: String!
  date: String!
  latitude: Float!
  longitude: Float!
  owner: User
  website: Website
  meta_keywords: String
  meta_description: String
  meta_title: String
}

type LinkExchange {
  id: Int!
  url: String!
  title: String!
  locale: String
  description: String
  owner: User
  website: Website
  active: Boolean
}

type Menu {
  menu_id: Int!
  website: Website
  parent_id: Int
  rewrite_id: Int
  title: String!
  locale: String
  href: String
  target: String
  internal: String
  breadcrumb: String
  level: Int
  children: [Menu]
}

type Rewrite {
  id: Int!
  website: Website
  owner: User
  url: String
  route: String
  locale: String
}

type PageRegions {
  after_body_open: String
  before_body_close: String
  pre_menu: String
  post_menu: String
  pre_header: String
  post_header: String
  pre_content: String
  post_content: String
  pre_footer: String
  post_footer: String
}

type ConfigsResult {
  website: Website!
  locale: String
  configs: [ConfigEntry]
}

type ConfigEntry {
  path: String!
  value: String
}
