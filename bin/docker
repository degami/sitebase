#!/bin/bash
root_dir=`pwd`
php_bin=`which php`
docker_compose_bin=`which docker-compose`
if [[ -z $docker_compose_bin ]]; then
  docker=`which docker`
  docker_compose_bin="$docker compose"
fi
docker_bin="$root_dir/bin/docker"

function dockerps {
  target=$1
  return=$($docker_compose_bin ps $target | grep 'Up')

  if [[ -n $return ]]; then
    echo 1
  else
    echo 0
  fi
}

function dockerexec {
  target=$1
  shift
  $docker_compose_bin exec $target $@
}

function dockershell {
  target=$1
  dockerexec $target /bin/sh
}

function dockerstart {
  echo "starting docker"

  args=""
  no_detach=0
  for arg in "$@"; do
      if [[ "$arg" == "--no-detach" ]]; then
          no_detach=1
          break
      else
        args="$args $arg"
      fi
  done

  if [[ $no_detach -eq 1 ]]; then
    $docker_compose_bin up $args
  else
    $docker_compose_bin up -d $args
  fi
}

function  dockerstop {
  echo "stopping docker"

  args=""
  for arg in "$@"; do
      if [[ "$arg" == "--no-detach" ]]; then
        break
      else
        args="$args $arg"
      fi
  done

  $docker_compose_bin stop $args
}

function  dockerbuild {
  echo "building docker"
  args=$@
  $docker_compose_bin build $args
}

if ! [ -e $docker_bin ]; then
    echo "This script should be run from the root dir"
    exit
fi

# load project env variables
source .env

###########
## start ##
###########

cd $root_dir/docker


if [[ ! -e .env ]]; then
  cp .env.sample .env
fi

case "$1" in
  build)
      if [[ $(dockerps web) = 1 ]]; then
        echo "docker is up"
      else
        shift
        dockerbuild $@
      fi
      ;;
  start|go|up)
      shift

      if [[ $(dockerps web) = 1 ]]; then
        echo "docker is up"
      else
        dockerstart $@
      fi
      ;;
  stop|k|down)
      shift

      if [[ $(dockerps web) = 1 ]]; then
        dockerstop $@
      else
        echo "docker is not running"
      fi
      ;;
  status|st)
      if [[ $(dockerps web) = 1 ]]; then
        echo "docker is up"
      else
        echo "docker is down"
      fi
      ;;
  restart|r)
      shift

      dockerstop $@
      dockerstart $@
      ;;
  shell|sh)
      if [[ -n $2 ]]; then
        if [[ $(dockerps $2) = 1 ]]; then
          dockershell $2
        else
          echo "container $2 is down"
        fi
      else
        echo "missing container name"
      fi
      ;;
  ps)
      $docker_compose_bin ps
      ;;
  console)
      if [[ $(dockerps php-fpm) = 1 ]]; then
        shift
        dockerexec php-fpm /var/www/html/bin/console "$@"
      else
        echo "container php-fpm is down"
      fi
    ;;
  dbshell|db)
      if [[ $(dockerps database) = 1 ]]; then
        dockerexec database mariadb -u $DATABASE_USER -p$DATABASE_PASS -A $DATABASE_NAME
      else
        echo "container database is down"
      fi
      ;;
  composer)
      if [[ $(dockerps php-fpm) = 1 ]]; then
        shift
        dockerexec php-fpm composer "$@"
      else
        echo "container php-fpm is down"
      fi
    ;;
  phpshell|php)
      if [[ $(dockerps php-fpm) = 1 ]]; then
        shift
        dockerexec php-fpm php -a "$@"
      else
        echo "container php-fpm is down"
      fi
    ;;
  *)
      echo $"Usage: $0 {build, start|go|up, stop|k|down, restart|r, status|st, sh[ell] <web|database|php-fpm>, console <command>}"
      exit 1
esac
